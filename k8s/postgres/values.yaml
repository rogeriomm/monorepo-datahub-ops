global:
  postgresql:
    ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
    ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
    ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
    ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
    ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
    ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
    ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
    ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
    ##
    auth:
      postgresPassword: "yIZwYUTc3M2rrK0u3N0HPg"
      username: ""
      password: ""
      database: ""
      existingSecret: ""
      secretKeys:
        adminPasswordKey: ""
        userPasswordKey: ""
        replicationPasswordKey: ""
    ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
    ##
    service:
      ports:
        postgresql: ""





primary:
  service:
    # 1. Change from ClusterIP to LoadBalancer to trigger k3s’s ServiceLB
    type: LoadBalancer

    # 2. (Optional) Preserve client source IP
    externalTrafficPolicy: Cluster

    # 3. (Optional) Restrict which CIDRs can reach your DB
    ##loadBalancerSourceRanges:
    ##  - 0.0.0.0/0   # → replace with your office/home subnet

    # 4. (Optional) Request a specific LB IP (must be free on your nodes)
    loadBalancerIP: 192.168.15.251

# If you have read replicas and want them externally reachable too:
readReplicas:
  service:
    type: LoadBalancer
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges:
      - 0.0.0.0/0


